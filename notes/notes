COMMANDS:
    BASH:
        ls -la      //check file permissions
            - read -> (r)
            - write -> (w)
        chmod +x <filename.extension>   //adds execution permissions to file
        cp -R directory_1/ directory_2/   //copies directory_1 into directory_2
        cp -R directory_1/. directory_2/   //copies contents of directory_1 into directory_2
        rosservice call /gazebo/delete_model "model_name: 'brick_box_3x1x3"
        mv <path/sourcefolder> <path/destinationfolder> // move directory

        roslaunch <package_name> <launch_file>      //launch ros program
            - pkg="package_name"                        //package ros will execute
            - type "filename.py"                        //program file we want to execute
            - name "node_name"                          //we set the name of the node that will launch the program file
            - output "type_of_output"                   //how result is displayed (usually 'screen')
        roscd <package_name>                        //go to any ros package

    PACKAGES:
        catkin_create_pkg <package_name> <package_dependencies>         //create NEW package
        catkin_make                                                     //compiles entire src directory *issue in catkin_ws/src directory!*
        rospack list                                                    //list all packages in your ROS system
        rospack list | grep <package_name>                               //search for a specific package
        rospack profile                                                  //force ROS to refresh package list
            - add '--zombie-only' to get just directory names

    PARAMETERS:
        rosparam get <parameter_name>                  //get parameter value
        rosparam set <parameter_name> <value>          //set package value

    NODES:
        rosnode list                    //view running nodes
        rosnode info <node_name>        //view node information

    TOPICS:
        rostopic list                               //list available topics
        rostopic list | grep 'topic_name'           //check for specific topic
        rostopic info <topic_name>                  //request information about a topic
        rostopic echo <topic_name>                  //show output of topic
        rostopic echo <topic_name> -n1              //only last message
        rostopic -h                                 //"help". shows commands available

    MESSAGES:
        rosmsg show <message>                       //get info about a message

Concepts:
    publisher - node that continouously publishes a message into a topic
    topic - "pipe" for nodes to publish or read info


TROUBLESHOOTING:
    python <script_name.py> //runs the python script without ros to see if the code is good
    rosrun <pkg_name> <script_name.py> //makes ros run the python script to check if ROS can do it